import queue

g = {
    'المرج الجديدة': [ 'المرج' ],
    'المرج': [ 'عزبة النخل', 'المرج الجديدة' ],
    'عزبة النخل': [ 'محطة عين شمس', 'المرج' ],
    'محطة عين شمس': [ 'المطرية', 'عزبة النخل' ],
    'المطرية': [ 'حلمية الزيتون', 'محطة عين شمس' ],
    'حلمية الزيتون': [ 'حدائق الزيتون', 'المطرية' ],
    'حدائق الزيتون': [ 'سراي القبة', 'حلمية الزيتون' ],
    'سراي القبة': [ 'حمامات القبة', 'حدائق الزيتون' ],
    'حمامات القبة': [ 'كوبري القبة', 'سراي القبة' ],
    'كوبري القبة': [ 'منشية الصدر', 'حمامات القبة' ],
    'منشية الصدر': [ 'الدمرداش', 'كوبري القبة' ],
    'الدمرداش': [ 'غمرة', 'منشية الصدر' ],
    'غمرة': [ 'الشهداء', 'الدمرداش' ],
    # el-shohdaa switcher station should be here
    'عرابي': [ 'ناصر', 'الشهداء' ],
    'ناصر': [ 'السادات', 'عرابي' ],
    # the sadat switcher station should be here
    'سعد زغلول': [ 'السيدة زينب', 'السادات' ],
    'السيدة زينب': [ 'الملك الصالح', 'سعد زغلول' ],
    'الملك الصالح': [ 'مار جرجس', 'السيدة زينب' ],
    'مار جرجس': [ 'الزهراء', 'الملك الصالح' ],
    'الزهراء': [ 'دار السلام', 'مار جرجس' ],
    'دار السلام': [ 'حدائق المعادي', 'دار السلام' ],
    'حدائق المعادي': [ 'المعادي', 'دار السلام' ],
    'المعادي': [ 'ثكنات المعادي', 'حدائق المعادي' ],
    'ثكنات المعادي': [ 'طره البلد', 'المعادي' ],
    'طره البلد': [ 'كوتسيكا', 'ثكنات المعادي' ],
    'كوتسيكا': [ 'طره الاسمنت', 'طره البلد' ],
    'طره الاسمنت': [ 'المعصرة', 'طره الاسمنت' ],
    'المعصرة': [ 'حدائق حلوان', 'طره الاسمنت' ],
    'حدائق حلوان': [ 'وادي حوف', 'المعصرة' ],
    'وادي حوف': [ 'جامعة حلوان', 'حدائق حلوان' ],
    'جامعة حلوان': [ 'عين حلوان', 'وادي حوف' ],
    'عين حلوان': [ 'محطة حلوان', 'جامعة حلوان' ],
    'محطة حلوان': [ 'عين حلوان' ],
    # ---- new line ----
    'المنيب': [ 'ساقية مكي' ],
    'ساقية مكي': [ 'ام المصريين', 'المنيب' ],
    'ام المصريين': [ 'الجيزة', 'ساقية مكي' ],
    'الجيزة': [ 'فيصل', 'ام المصريين' ],
    'فيصل': [ 'جامعة القاهرة', 'الجيزة' ],
    'جامعة القاهرة': [ 'البحوث', 'فيصل' ],
    'البحوث': [ 'الدقي', 'جامعة القاهرة' ],
    'الدقي': [ 'الاوبرا', 'البحوث' ],
    'الاوبرا': [ 'السادات', 'الدقي' ],
    # the sadat switcher station should be here
    'محمد نجيب': [ 'العتبة', 'السادات' ],
    # el-atabaa switcher station should be here
    # el-shohdaa switcher station should be here
    'مسرة': [ 'روض الفرج', 'الشهداء' ],
    'روض الفرج': [ 'سانت تريز', 'مسرة' ],
    'سانت تريز': [ 'الخلفاوي', 'روض الفرج' ],
    'الخلفاوي': [ 'المظلات', 'سانت تريز' ],
    'المظلات': [ 'كلية الزراعة', 'الخلفاوي' ],
    'كلية الزراعة': [ 'شبرا الخيمة', 'المظلات' ],
    'شبرا الخيمة': [ 'شبرا الخيمة' ],
    # ---- new line ----
    'نادي الشمس': [ 'الف مسكن' ],
    'الف مسكن': [ 'هليوبليس', 'نادي الشمس' ],
    'هليوبليس': [ 'هارون', 'الف مسكن' ],
    'هارون': [ 'الاهرام', 'هليوبليس' ],
    'الاهرام': [ 'كلية البنات', 'هارون' ],
    'كلية البنات': [ 'الاستاد', 'الاهرام' ],
    'الاستاد': [ 'ارض المعارض', 'كلية البنات' ],
    'ارض المعارض': [ 'العباسية', 'الاستاد' ],
    'العباسية': [ 'عبده باشا', 'ارض المعارض' ],
    'عبده باشا': [ 'الجيش', 'العباسية' ],
    'الجيش': [ 'باب الشعرية', 'عبده باشا' ],
    'باب الشعرية': [ 'العتبة', 'الجيش' ],
    # ---- switchers ----
    'الشهداء': [ 'عرابي', 'غمرة', 'العتبة', 'مسرة' ],
    'السادات': [ 'ناصر', 'سعد زغلول', 'محمد نجيب', 'الاوبرا' ],
    'العتبة': [ 'باب الشعرية', 'الشهداء', 'محمد نجيب' ]
}

n = len(g)

def solve(start):
    q = queue.Queue()
    q.put(start)
    visited = {}
    prev = {}
    for i in list(g.keys()):
        visited[i] = False
        prev[i] = None
    visited[start] = True
    while not q.empty():
        node = q.get()
        neighbors = g[node]
        for nxt in neighbors:
            if not visited[nxt]:
                q.put(nxt)
                visited[nxt] = True
                prev[nxt] = node
    return prev

def reconstructPath(start, end, prev):
    # reconstruct path going backwards from end
    path = []
    current = end
    while current != None:
        path.append(current)
        current = prev[current]
    path.reverse()
    # if start and end are connected return the path
    if path[0] == start:
        return path
    return []

def bfs(start, end):
    # do a BFS starting at node s
    prev = solve(start)

    # return reconstructed path from end to start
    return reconstructPath(start, end, prev)

if __name__ == '__main__':
    # result = bfs('منشية الصدر', 'العباسية')
    result = bfs('المرج', 'العباسية')
    with open('result.txt', 'w', encoding='utf-8') as f:
        for i in result:
            f.write(i + '\n')
            